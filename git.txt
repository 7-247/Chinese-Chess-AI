git commit 提交

branch
git branch <name> 创建分支name
git branch -f <name1> <name2>(^|^^|(~{\d})) 将分支name1指向name2
git branch -u <remoteName> (<name>) 让当前/<name>分支追踪远程分支

checkout
git checkout <name> 将head指向<name>版本（与鼠标点击node作用相同）（可以仅输入hash的前几位直到name唯一确定）
git checkout <name>(^|^^|(~{\d})) 将head指向到分支name的第1/2/{/d=1}个父提交
git checkout -b <name> (<remoteName>) 创建并切换到分支name，其跟踪远程分支<remoteName>

git merge <name> 将<name>合并到当前分支里
git rebase <name> 将当前分支工作移到<name>中
git reset <name>~{\d} 将<name>分支向上移动，然后将head指向他，模拟版本退回（仅本地）
git revert <name> 将<name>相对上个版本的修改全部撤销，作为新版本commit，然后将head指向他，模拟版本退回

————————

git clone 从远程把项目下载到本地，同时下载整棵版本树
git fetch 从远程把项目更新到本地，同时更新整棵版本树（暂存在一个临时文件夹，不改变任何现有文件）
git pull Fetch和Merge<just-fetched-branch>的缩写（无冲突才可merge）
git pull --rebase Fetch和rebase <o/master>的缩写
git push 从本地把项目更新到远程，同时更新整棵版本树
git push <remote> <place> 向远程仓库<remote>更新本地分支<place>
git push <remote> <source>(~):<destination>(~) 向远程仓库<remote>更新本地分支<source>到<destination>（若不存在将创建）



git fakeTeamwork (<branch>) ({\d})